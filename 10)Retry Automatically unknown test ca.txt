Retry Automatically unknown test cases: (IAnnotation Transformer)
=================================================================
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Suite">
	<listeners>
		<listener class-name="org.test.testng.ExecuteAllFailedTC"></listener>
	</listeners>

	<test thread-count="5" name="Test">
		<classes>

			<class name="org.test.testng.AutoFailedTC" />

		</classes>
	</test> <!--
	Test -->
</suite> <!--
Suite -->
=====================================================================================================================

# Provide this class into Listener class
==========================================

package org.test.testng;

import java.lang.reflect.Constructor;
import java.lang.reflect.Method;

import org.testng.IAnnotationTransformer;
import org.testng.IRetryAnalyzer;
import org.testng.annotations.ITestAnnotation;

public class ExecuteAllFailedTC implements IAnnotationTransformer {
	
	@Override
	public void transform(ITestAnnotation arg0, Class arg1, Constructor arg2, Method arg3) {
		arg0.setRetryAnalyzer(RetryAnalyser.class);
	}

}
========================================================================================================
package org.test.testng;

import org.testng.IRetryAnalyzer;
import org.testng.ITestResult;

public class RetryAnalyser implements IRetryAnalyzer {
	int min = 0;
	int max = 10;

	@Override
	public boolean retry(ITestResult result) {
		if (min <= max) {
			min++;
			System.out.println(min);
			return true;
		}
		return false;
	}

}

==========================================================================================================
package org.test.testng;

import org.testng.Assert;
import org.testng.annotations.Test;

public class AutoReatryFailedTestClass {

	@Test
	public void testName() {

		Assert.assertEquals(false, true);

	}

	@Test
	private void testName2() {
		Assert.assertEquals(false, false);

	}

}
==================================================================================================